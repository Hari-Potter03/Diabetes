youden_values <- coords(roc_A, "best", ret = "threshold", best.method = "youden")
# The threshold that maximizes Youden's J
youden_values[[1]]
# Calculate Youden's J statistic
youden_values <- coords(roc_B, "best", ret = "threshold", best.method = "youden")
# The threshold that maximizes Youden's J
youden_values[[1]]
# Calculate Youden's J statistic
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")
# The threshold that maximizes Youden's J
youden_values[[1]]
# Calculate Youden's J statistic
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")
# Calculate Youden's J statistic
coords(roc_all_A, "best", ret = "threshold", best.method = "youden")
# Calculate Youden's J statistic
coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]]
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
data.frame(thresh)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
data.frame(c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B"), thresh)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
data.frame(, thresh)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
data.frame(model_names, thresh)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best[1, ]
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best[1, 2]
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best
best[3,2]
preds_all_A <- predict(model_all_A, newdata = dat[!train,], type = "response")
preds_all_A <- ifelse(preds_all_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
preds_A <- predict(model_A, newdata = dat[!train,], type = "response")
preds_A <- ifelse(preds_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B <- predict(model_all_B, newdata = dat[!train,])
confusionMatrix(factor(preds_all_B$class),factor(dat[!train,]$spam))
preds_B <- predict(model_B, newdata = dat[!train,])
confusionMatrix(factor(preds_B$class),factor(dat[!train,]$spam))
roc_all_A <- roc((dat[!train,]$spam)~preds_all_A)
roc_A <- roc((dat[!train,]$spam)~preds_A)
roc_all_B <- roc((dat[!train,]$spam)~preds_all_B$posterior[,2])
roc_B <- roc((dat[!train,]$spam)~preds_B$posterior[,2])
model_all_A.auc <- auc(roc_all_A)
model_A.auc <- auc(roc_A)
model_all_B.auc <- auc(roc_all_B)
model_B.auc <- auc(roc_B)
plot(roc_all_A, main = "ROC Graphs for Models A and B (Intial and Best)")
plot(roc_all_B, add = T, col = "red")
plot(roc_A, add = T, col = "blue")
plot(roc_B, add = T, col = "green")
legend("bottomright", legend = c(paste0("Initial Model A (", round(model_all_A.auc, 3), ")"), paste0("Initial Model B (", round(model_all_B.auc, 3), ")"),
paste0("Best Model A (", round(model_A.auc, 3), ")"), paste0("Best Model B (", round(model_B.auc, 3), ")")), col = c("black", "red", "blue", "green"), lty = 1)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best[3,2]
preds_all_B.tuned <- predict(model_all_B, newdata = dat[!train,])
preds_all_B.tuned <- ifelse(preds_all_B.tuned$posterior[, "spam"] >= best[3,2], 1, 0)
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "spam"] >= best[3,2], 1, 0)
preds_all_B$posterior
View(preds_all_B)
preds_all_B$posterior
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "spam"] >= best[3,2], 1, 0)
preds_all_B$class
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "spam"] >= best[3,2], 1, 0)
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "1"] >= best[3,2], 1, 0)
confusionMatrix(factor(preds_all_B.tuned),factor(dat[!train,]$spam))
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "1"] >= best[3,2], 1, 0)
confusionMatrix(factor(preds_all_B.tuned),factor(dat[!train,]$spam))
preds_B.tuned <- ifelse(preds_B$posterior[, "1"] >= best[4,2], 1, 0)
confusionMatrix(factor(preds_B.tuned),factor(dat[!train,]$spam))
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "1"] >= best[3,2], 1, 0)
confusionMatrix(factor(preds_all_B.tuned),factor(dat[!train,]$spam))
preds_B.tuned <- ifelse(preds_B$posterior[, "1"] >= best[4,2], 1, 0)
confusionMatrix(factor(preds_B.tuned),factor(dat[!train,]$spam))
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_A.brier
model_A.brier
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
data.frame(model_names, brier_scores)
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > 1 / nrow(dat[train,]))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > 1 / nrow(dat[train,]))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,].
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > 1 / nrow(dat[train,]))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > 1 / nrow(dat[train,]))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > 1 / nrow(dat[train,]))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
preds_all_A <- predict(model_all_A, newdata = dat[!train,], type = "response")
preds_all_A <- ifelse(preds_all_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
preds_A <- predict(model_A, newdata = dat[!train,], type = "response")
preds_A <- ifelse(preds_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B <- predict(model_all_B, newdata = dat[!train,])
confusionMatrix(factor(preds_all_B$class),factor(dat[!train,]$spam))
preds_B <- predict(model_B, newdata = dat[!train,])
confusionMatrix(factor(preds_B$class),factor(dat[!train,]$spam))
roc_all_A <- roc((dat[!train,]$spam)~preds_all_A)
roc_A <- roc((dat[!train,]$spam)~preds_A)
roc_all_B <- roc((dat[!train,]$spam)~preds_all_B$posterior[,2])
roc_B <- roc((dat[!train,]$spam)~preds_B$posterior[,2])
model_all_A.auc <- auc(roc_all_A)
model_A.auc <- auc(roc_A)
model_all_B.auc <- auc(roc_all_B)
model_B.auc <- auc(roc_B)
plot(roc_all_A, main = "ROC Graphs for Models A and B (Intial and Best)")
plot(roc_all_B, add = T, col = "red")
plot(roc_A, add = T, col = "blue")
plot(roc_B, add = T, col = "green")
legend("bottomright", legend = c(paste0("Initial Model A (", round(model_all_A.auc, 3), ")"), paste0("Initial Model B (", round(model_all_B.auc, 3), ")"),
paste0("Best Model A (", round(model_A.auc, 3), ")"), paste0("Best Model B (", round(model_B.auc, 3), ")")), col = c("black", "red", "blue", "green"), lty = 1)
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
data.frame(model_names, brier_scores)
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
data.frame(model_names, brier_scores)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best
preds_all_A <- predict(model_all_A, newdata = dat[!train,], type = "response")
preds_all_A <- ifelse(preds_all_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
preds_A <- predict(model_A, newdata = dat[!train,], type = "response")
preds_A <- ifelse(preds_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B <- predict(model_all_B, newdata = dat[!train,])
confusionMatrix(factor(preds_all_B$class),factor(dat[!train,]$spam))
preds_B <- predict(model_B, newdata = dat[!train,])
confusionMatrix(factor(preds_B$class),factor(dat[!train,]$spam))
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
tibble(best)
roc_all_A <- roc((dat[!train,]$spam)~preds_all_A)
roc_A <- roc((dat[!train,]$spam)~preds_A)
roc_all_B <- roc((dat[!train,]$spam)~preds_all_B$posterior[,2])
roc_B <- roc((dat[!train,]$spam)~preds_B$posterior[,2])
model_all_A.auc <- auc(roc_all_A)
model_A.auc <- auc(roc_A)
model_all_B.auc <- auc(roc_all_B)
model_B.auc <- auc(roc_B)
plot(roc_all_A, main = "ROC Curves for Models' A and B (Initial and Best)")
plot(roc_all_B, add = T, col = "red")
plot(roc_A, add = T, col = "blue")
plot(roc_B, add = T, col = "green")
legend("bottomright", legend = c(paste0("Initial Model A (", round(model_all_A.auc, 3), ")"), paste0("Initial Model B (", round(model_all_B.auc, 3), ")"),
paste0("Best Model A (", round(model_A.auc, 3), ")"), paste0("Best Model B (", round(model_B.auc, 3), ")")), col = c("black", "red", "blue", "green"), lty = 1)
# Calculate Youden's J statistic
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
tibble(best)
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B.tuned <- ifelse(preds_all_B$posterior[, "1"] >= best[3,2], 1, 0)
confusionMatrix(factor(preds_all_B.tuned),factor(dat[!train,]$spam))
preds_B.tuned <- ifelse(preds_B$posterior[, "1"] >= best[4,2], 1, 0)
confusionMatrix(factor(preds_B.tuned),factor(dat[!train,]$spam))
preds_all_A <- predict(model_all_A, newdata = dat[!train,], type = "response")
preds_all_A <- ifelse(preds_all_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_all_A),factor(dat[!train,]$spam))
preds_A <- predict(model_A, newdata = dat[!train,], type = "response")
preds_A <- ifelse(preds_A >= 0.5, 1, 0)
confusionMatrix(factor(preds_A),factor(dat[!train,]$spam))
preds_all_B <- predict(model_all_B, newdata = dat[!train,])
confusionMatrix(factor(preds_all_B$class),factor(dat[!train,]$spam))
preds_B <- predict(model_B, newdata = dat[!train,])
confusionMatrix(factor(preds_B$class),factor(dat[!train,]$spam))
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
data.frame(model_names, brier_scores)
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
brier <- data.frame(model_names, brier_scores)
tibble(brier)
library(tidyverse)
library(knitr)
library(tinytex)
library(MASS)
library(fields)
library(klaR)
library(caret)
library(pROC)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(out.width = "60%",fig.align='center')
load("/Users/sriharisrinivasan/Desktop/Data Science/STAT 4610 - Statistical Learning/Datasets/spam.RData")
head(dat)
str(dat)
model_all_A <- glm(spam~.,data=dat[train,],family=binomial)
summary(model_all_A)
model_B <- lda(spam ~ make + address + all + X3d + our + over + remove + internet +
order + receive + will + free + business + email + you +
credit + your + font + X000 + money + hp + hpl + george +
labs + X857 + data + X85 + technology + X1999 + parts + pm +
cs + meeting + original + project + re + edu + table + conference +
punc_semiColon + punc_leftParen + punc_leftSquare + punc_exclam +
punc_dollar + punc_pound + capLong + capTot, data = dat[train,])
roc_all_A <- roc((dat[!train,]$spam)~preds_all_A)
roc_A <- roc((dat[!train,]$spam)~preds_A)
roc_all_B <- roc((dat[!train,]$spam)~preds_all_B$posterior[,2])
roc_B <- roc((dat[!train,]$spam)~preds_B$posterior[,2])
model_all_A.auc <- auc(roc_all_A)
model_A.auc <- auc(roc_A)
model_all_B.auc <- auc(roc_all_B)
model_B.auc <- auc(roc_B)
plot(roc_all_A, main = "ROC Curves for Models' A and B (Initial and Best)")
plot(roc_all_B, add = T, col = "red")
plot(roc_A, add = T, col = "blue")
plot(roc_B, add = T, col = "green")
legend("bottomright", legend = c(paste0("Initial Model A (", round(model_all_A.auc, 3), ")"), paste0("Initial Model B (", round(model_all_B.auc, 3), ")"),
paste0("Best Model A (", round(model_A.auc, 3), ")"), paste0("Best Model B (", round(model_B.auc, 3), ")")), col = c("black", "red", "blue", "green"), lty = 1)
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
brier <- data.frame(model_names, brier_scores)
tibble(brier)
library(tidyverse)
library(knitr)
library(tinytex)
library(MASS)
library(fields)
library(klaR)
library(caret)
library(pROC)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(out.width = "60%",fig.align='center')
load("/Users/sriharisrinivasan/Desktop/Data Science/STAT 4610 - Statistical Learning/Datasets/spam.RData")
head(dat)
str(dat)
model_all_A <- glm(spam~.,data=dat[train,],family=binomial)
summary(model_all_A)
stepAIC(model_all_A, direction = "both")
library(tidyverse)
library(knitr)
library(tinytex)
library(MASS)
library(fields)
library(klaR)
library(caret)
library(pROC)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(out.width = "60%",fig.align='center')
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
best
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
paste(best[2, 1], ":", best[2, 2])
paste(best[3, 1], ":", best[3, 2])
paste(best[4, 1], ":", best[4, 2])
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
paste(best[2, 1], ":", best[2, 2])
paste(best[3, 1], ":", round(best[3, 2]), 2)
paste(best[4, 1], ":", round(best[4, 2]), 2)
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
paste(best[2, 1], ":", best[2, 2])
paste(best[3, 1], ":", round(as.numeric(best[3, 2]), 2))
paste(best[4, 1], ":", round(best[4, 2]), 2)
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
paste(best[2, 1], ":", best[2, 2])
paste(best[3, 1], ":", round(as.numeric(best[3, 2]), 2))
paste(best[4, 1], ":", round(as.numeric(best[4, 2]), 2))
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
brier <- data.frame(model_names, brier_scores)
brier
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
brier <- data.frame(model_names, brier_scores)
paste(brier[1, 1], ":", round(brier[1, 2], 4))
paste(best[2, 1], ":", round(brier[2, 2], 4))
paste(best[3, 1], ":", round(brier[3, 2], 4))
paste(best[4, 1], ":", round(brier[4, 2], 4))
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
paste(best[1, 1], ":", best[1, 2])
paste(best[2, 1], ":", best[2, 2])
paste(best[3, 1], ":", round(as.numeric(best[3, 2]), 2))
paste(best[4, 1], ":", round(as.numeric(best[4, 2]), 2))
thresh <- c(coords(roc_all_A, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_A, "best", ret = "threshold", best.method = "youden")[[1]],
coords(roc_all_B, "best", ret = "threshold", best.method = "youden")[[1]], coords(roc_B, "best", ret = "threshold", best.method = "youden")[[1]])
model_names <- c("Initial Model A", "Best Model A", "Initial Model B", "Best Model B")
best <- data.frame(model_names, thresh)
model_all_A.brier <- mean( (dat[!train,]$spam - preds_all_A)^2 )
model_A.brier <- mean( (dat[!train,]$spam - preds_A)^2 )
model_all_B.brier <- mean( (dat[!train,]$spam - preds_all_B$posterior[, "1"])^2 )
model_B.brier <- mean( (dat[!train,]$spam - preds_B$posterior[, "1"])^2 )
brier_scores <- c(model_all_A.brier, model_A.brier, model_all_B.brier, model_B.brier)
brier <- data.frame(model_names, brier_scores)
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.5)
dat[outlier_all_B]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.5)
dat[outlier_B]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.4)
dat[outlier_all_B]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.4)
dat[outlier_all_B,]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.5)
dat[outlier_B,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.4)
dat[outlier_all_B,]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.4)
dat[outlier_B,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.5)
dat[outlier_all_B,]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.5)
dat[outlier_B,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.4)
dat[outlier_all_B,]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.4)
dat[outlier_B,]
cook_d_all_A <- cooks.distance(model_all_A)
outlier_all_A <- which(cook_d_all_A > (4 / nrow(dat[train,])))
dat[outlier_all_A,]
cook_d_A <- cooks.distance(model_A)
outlier_A <- which(cook_d_A > (4 / nrow(dat[train,])))
dat[outlier_A,]
pdist_all_B <- abs(predict(model_all_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_all_B <- which(pdist_all_B > 0.2)
dat[outlier_all_B,]
pdist_B <- abs(predict(model_B, newdata = dat[!train,])$posterior[, "1"] - 0.5)
outlier_B <- which(pdist_B > 0.2)
dat[outlier_B,]
